/*
 * Copyright (C) 2017-2018 HERE Europe B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * License-Filename: LICENSE
 */

import groovy.transform.Immutable

import javax.inject.Inject

import org.gradle.api.internal.artifacts.repositories.DefaultFlatDirArtifactRepository
import org.gradle.api.internal.artifacts.repositories.DefaultIvyArtifactRepository
import org.gradle.api.internal.artifacts.repositories.DefaultMavenArtifactRepository
import org.gradle.tooling.provider.model.ToolingModelBuilder
import org.gradle.tooling.provider.model.ToolingModelBuilderRegistry

// Apply the DependencyTreePlugin defined below to register a custom model for the Tooling API. The plugin is required
// to get an instance of ToolingModelBuilderRegistry by dependency injection.
// See:
// https://docs.gradle.org/current/userguide/init_scripts.html#sec:init_script_plugins
// https://github.com/gradle/gradle/blob/176c18d/subprojects/docs/src/samples/toolingApi/customModel/plugin/src/main/java/org/gradle/sample/plugin/CustomPlugin.java
if (AbstractDependencyTreePlugin.isCompatibleGradleVersion(gradle.gradleVersion)) {
    apply plugin: DependencyTreePlugin
} else {
    apply plugin: LegacyDependencyTreePlugin
}

// This needs to be kept in sync with the same interface in "GradleSupport.kt".
interface DependencyTreeModel {
    String getGroup()
    String getName()
    String getVersion()
    List<Configuration> getConfigurations()
    List<String> getRepositories()
    List<String> getErrors()
}

@Immutable
class DependencyTreeModelImpl implements DependencyTreeModel, Serializable {
    String group
    String name
    String version
    List<Configuration> configurations
    List<String> repositories
    List<String> errors
}

// This needs to be kept in sync with the same interface in "GradleSupport.kt".
interface Configuration {
    String getName()
    List<Dependency> getDependencies()
}

@Immutable
class ConfigurationImpl implements Configuration, Serializable {
    String name
    List<Dependency> dependencies
}

// This needs to be kept in sync with the same interface in "GradleSupport.kt".
interface Dependency {
    String getGroupId()
    String getArtifactId()
    String getVersion()
    String getClassifier()
    String getExtension()
    List<Dependency> getDependencies()
    String getError()
    String getPomFile()
    String getLocalPath()
}

@Immutable
class DependencyImpl implements Dependency, Serializable {
    String groupId = ''
    String artifactId = ''
    String version = ''
    String classifier = ''
    String extension = ''
    List<Dependency> dependencies = []
    String error
    String pomFile = ''
    String localPath
}

class DependencyTreePlugin extends AbstractDependencyTreePlugin<Gradle> {
    @Inject
    DependencyTreePlugin(ToolingModelBuilderRegistry registry) {
        super(registry)
    }
}

class LegacyDependencyTreePlugin extends AbstractDependencyTreePlugin<Project> {
    @Inject
    LegacyDependencyTreePlugin(ToolingModelBuilderRegistry registry) {
        super(registry)
    }
}

class AbstractDependencyTreePlugin<T> implements Plugin<T> {
    static boolean isCompatibleGradleVersion(String gradleVersion) {
        def array = gradleVersion.split('\\.')
        return array[0].toInteger() > 2 || (array[0].toInteger() == 2 && array[1].toInteger() >= 14)
    }

    private final ToolingModelBuilderRegistry registry

    AbstractDependencyTreePlugin(ToolingModelBuilderRegistry registry) {
        this.registry = registry
    }

    void apply(T t) {
        registry.register(new DependencyTreeModelBuilder())
    }

    private static class DependencyTreeModelBuilder implements ToolingModelBuilder {
        static DependencyImpl dependencyFromDisplayName(String displayName, List<Dependency> dependencies,
                                                        String error) {
            if (displayName.startsWith('project :')) {
                def coordinates = displayName.split(':', 2)
                return new DependencyImpl(groupId: '<project>', artifactId: coordinates[1], dependencies: dependencies,
                        error: error.toString())
            }

            def coordinates = displayName.split(':')

            if (coordinates.length == 3) {
                return new DependencyImpl(groupId: coordinates[0], artifactId: coordinates[1], version: coordinates[2],
                        dependencies: dependencies, error: error.toString())
            }

            return new DependencyImpl(groupId: '<unknown>', artifactId: displayName.replace(':', '_'),
                    dependencies: dependencies, error: error.toString())
        }

        @Override
        boolean canBuild(String modelName) {
            return modelName == 'DependencyTreeModel'
        }

        @Override
        Object buildAll(String modelName, Project project) {

            List<String> errors = []

            if (!isCompatibleGradleVersion(project.gradle.gradleVersion)) {
                return new DependencyTreeModelImpl(project.group.toString(), project.name, project.version.toString(),
                        [], [], [("This project uses the unsupported Gradle version ${project.gradle.gradleVersion}. " +
                                'At least Gradle 2.14 is required.').toString()])
            }

            List<Configuration> configurations = project.configurations.findResults { configuration ->
                if (!configuration.hasProperty('canBeResolved') || configuration.canBeResolved) {
                    ResolutionResult result = configuration.getIncoming().getResolutionResult()
                    Set<ResolvedArtifact> resolvedArtifacts = []

                    try {
                        resolvedArtifacts = configuration.resolvedConfiguration.lenientConfiguration
                                .getArtifacts(Specs.<org.gradle.api.artifacts.Dependency> satisfyAll())
                    } catch (ResolveException e) {
                        project.logger.info("Artifacts for configuration '${configuration.name}' could not be " +
                                "resolved, therefore no information about artifact classifiers and extensions is " +
                                "available: ${e.message}")
                    }

                    List<Dependency> dependencies = result.getRoot().getDependencies().collect {
                        parseDependency(it, project, resolvedArtifacts, [])
                    }

                    new ConfigurationImpl(configuration.name, dependencies)
                } else {
                    project.logger.info("Configuration '${configuration.name}' cannot be resolved.")
                    null
                }
            }

            List<String> repositories = project.repositories.findResults {
                if (it instanceof DefaultMavenArtifactRepository) {
                    it.url.toString()
                } else if (it instanceof DefaultFlatDirArtifactRepository) {
                    errors.add('Project uses a flat dir repository which is not supported by the analyzer. ' +
                            "Dependencies from this repository will be ignored: ${it.dirs}".toString())
                    null
                } else if (it instanceof DefaultIvyArtifactRepository) {
                    errors.add('Project uses an Ivy repository which is not supported by the analyzer. ' +
                            "Dependencies from this repository will be ignored: ${it.url}".toString())
                    null
                } else {
                    errors.add("Unknown repository type: ${it.getClass().name}".toString())
                    null
                }
            }

            def version = project.version.toString()
            if (version == 'unspecified') version = ''
            return new DependencyTreeModelImpl(project.group.toString(), project.name, version, configurations,
                    repositories, errors.unique())
        }

        Dependency parseDependency(DependencyResult dependencyResult, Project project,
                                   Set<ResolvedArtifact> resolvedArtifacts, List<String> parents) {
            if (dependencyResult instanceof ResolvedDependencyResult) {
                List<Dependency> dependencies = dependencyResult.selected.dependencies.findResults { dependency ->
                    // Do not follow circular dependencies, these can exist for project dependencies.
                    if (!(dependencyResult.requested.displayName in parents)) {
                        parseDependency(dependency, project, resolvedArtifacts,
                                [*parents, dependencyResult.requested.displayName])
                    } else {
                        null
                    }
                }

                ComponentIdentifier id = dependencyResult.selected.id
                if (id instanceof ModuleComponentIdentifier) {
                    def resolvedComponents = project.dependencies.createArtifactResolutionQuery()
                            .forComponents(id)
                            .withArtifacts(MavenModule, MavenPomArtifact)
                            .execute()
                            .resolvedComponents

                    // Imitate Kotlin's "firstOrNull()".
                    def result = resolvedComponents?.find { true }?.getArtifacts(MavenPomArtifact)?.find { true }

                    String error = null
                    String pomFile = null

                    if (result instanceof ResolvedArtifactResult) {
                        pomFile = result.file.absolutePath
                    } else if (result instanceof UnresolvedArtifactResult) {
                        error = collectCauses(result.failure).toString()
                    } else if (result == null) {
                        error = 'Resolution did not return any artifacts'
                    } else {
                        error = "Unknown ArtifactResult type: ${result.getClass().name}".toString()
                    }

                    def artifact = resolvedArtifacts.find {
                        // Cannot use instanceof because the classes below do not exist in all Gradle versions.
                        if (it.owner.getClass().name == 'org.gradle.api.internal.artifacts.DefaultModuleVersionIdentifier') {
                            id.group == it.owner.id.group && id.module == it.owner.id.name && id.version == it.owner.version
                        } else if (it.owner.getClass().name == 'org.gradle.api.internal.artifacts.ivyservice.dynamicversions.DefaultResolvedModuleVersion') {
                            id.group == it.owner.id.group && id.module == it.owner.id.name && id.version == it.owner.id.version
                        } else {
                            error = "Unknown artifact owner type: ${it.owner.getClass().name}".toString()
                            false
                        }
                    }

                    def classifier = artifact?.classifier ?: ''
                    def extension = artifact?.extension ?: ''

                    return new DependencyImpl(id.group, id.module, id.version, classifier, extension, dependencies,
                            error, pomFile, null)
                } else if (id instanceof ProjectComponentIdentifier) {
                    def dependencyProject = project.rootProject.findProject(id.projectPath)
                    return new DependencyImpl(dependencyProject.group.toString(), dependencyProject.name,
                            dependencyProject.version.toString(), '', '', dependencies, null, '',
                            dependencyProject.projectDir.absolutePath)
                } else {
                    return dependencyFromDisplayName(id.displayName, dependencies,
                            "Unknown id type: ${id.getClass().simpleName}")
                }
            } else if (dependencyResult instanceof UnresolvedDependencyResult) {
                return dependencyFromDisplayName(dependencyResult.attempted.displayName, [],
                        "Unresolved: ${collectCauses(dependencyResult.failure)}")
            } else {
                return dependencyFromDisplayName(dependencyResult.requested.displayName, [],
                        "Unknown result type: ${dependencyResult.getClass().simpleName}")
            }
        }

        private String collectCauses(Throwable throwable) {
            def result = "${throwable.getClass().simpleName}: ${throwable.message}"
            def cause = throwable.cause
            while (cause != null) {
                result += "\nCaused by: ${cause.getClass().simpleName}: ${cause.message}"
                cause = cause.cause
            }
            return result
        }
    }

}
